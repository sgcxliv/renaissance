<script>
	import { onMount } from 'svelte';
	import { browser } from '$app/environment';
	import { page } from '$app/stores';
	import MapPopup from './MapPopup.svelte';
	
	let map;
	let mapElement;
	let markerCluster;
	let markers = [];
	let totalMarkers = 0;
	let events = [];
	let metadata = {};
	
	// Filter states
	let showComposers = true;
	let showMusicians = true;
	let showNonMusicians = true;
	let showCertainty = false;
	let searchQuery = '';
	let dateMin = 1400;
	let dateMax = 1600;
	let institutionFilter = null;
	
	// UI elements
	let searchCount = 0;
	let activeNames = [];
	let autocompleteResults = [];
	let showAutocomplete = false;
	
	onMount(async () => {
		if (browser) {
			await loadData();
			await setupMap();
			await loadMarkers();
			
			// Check for shared event ID in URL
			const eventId = $page.url.searchParams.get('eventid');
			if (eventId) {
				loadMarkerFromURL(`EV:${eventId}`);
			}
		}
	});
	
	async function loadData() {
		try {
			// Load your JSON data here
			// events = await fetch('/data/Events.json').then(r => r.json());
			// metadata = await fetch('/data/metadata.json').then(r => r.json());
			
			// For now, using empty arrays
			events = [];
			metadata = {};
		} catch (error) {
			console.error('Error loading data:', error);
		}
	}
	
	async function setupMap() {
		if (typeof L === 'undefined') return;
		
		map = L.map(mapElement, { preferCanvas: true }).setView([50.0, 10.0], 5);
		
		L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
			maxZoom: 19,
			attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
		}).addTo(map);
		
		markerCluster = L.markerClusterGroup({
			maxClusterRadius: 50,
			spiderfyOnMaxZoom: false,
			showCoverageOnHover: false,
			zoomToBoundsOnClick: false,
			iconCreateFunction: function(cluster) {
				return L.divIcon({
					html: `<div style="
						width: 30px;
						height: 30px;
						border-radius: 50%;
						display: flex;
						align-items: center;
						justify-content: center;
						color: white;
						font-size: 14px;
						font-weight: bold;
						background: var(--primary-color);
						box-shadow: var(--shadow-md);
					">${cluster.getChildCount()}</div>`,
					className: 'custom-cluster',
					iconSize: L.point(40, 40)
				});
			}
		});
		
		map.addLayer(markerCluster);
	}
	
	async function loadMarkers() {
		// Implementation for loading markers from events data
		// This would process the events array and create markers
		totalMarkers = events.length;
		filterMarkers();
	}
	
	function filterMarkers() {
		// Implementation for filtering markers based on current filter states
		searchCount = markers.filter(marker => {
			// Apply filters here
			return true;
		}).length;
	}
	
	function handleSearch(event) {
		searchQuery = event.target.value;
		filterMarkers();
		
		if (searchQuery.length > 2) {
			// Implementation for autocomplete
			showAutocomplete = true;
		} else {
			showAutocomplete = false;
		}
	}
	
	function handleDateSliderChange() {
		filterMarkers();
	}
	
	function togglePersonType(type) {
		switch(type) {
			case 'composers':
				showComposers = !showComposers;
				break;
			case 'musicians':
				showMusicians = !showMusicians;
				break;
			case 'nonmusicians':
				showNonMusicians = !showNonMusicians;
				break;
		}
		filterMarkers();
	}
	
	function loadMarkerFromURL(eventId) {
		const marker = markers.find(m => m.eventId === eventId);
		if (marker && marker.leafletMarker) {
			const latlng = marker.leafletMarker.getLatLng();
			map.setView(latlng, 6);
			marker.leafletMarker.openPopup();
		}
	}
	
	function sharePoint(eventId) {
		const shareURL = `${window.location.origin}/?eventid=${eventId.replace('EV:', '')}`;
		navigator.clipboard.writeText(shareURL);
	}
</script>

<div class="container">
	<div class="row">
		<div id="map-container">
			<!-- Search Bar -->
			<div class="search-bar">
				<input 
					type="text" 
					placeholder="Search events, people, places..." 
					bind:value={searchQuery}
					on:input={handleSearch}
				/>
				
				<!-- Checkboxes -->
				<div class="checkbox-container">
					<div class="checkbox-item">
						<input 
							type="checkbox" 
							id="composer-select" 
							bind:checked={showComposers}
							on:change={() => togglePersonType('composers')}
						/>
						<label for="composer-select">
							<span class="color-sample" style="background-color: var(--primary-color);"></span>
							Composers
						</label>
					</div>
					
					<div class="checkbox-item">
						<input 
							type="checkbox" 
							id="musician-select" 
							bind:checked={showMusicians}
							on:change={() => togglePersonType('musicians')}
						/>
						<label for="musician-select">
							<span class="color-sample" style="background-color: var(--secondary-color);"></span>
							Musicians
						</label>
					</div>
					
					<div class="checkbox-item">
						<input 
							type="checkbox" 
							id="non-musician-select" 
							bind:checked={showNonMusicians}
							on:change={() => togglePersonType('nonmusicians')}
						/>
						<label for="non-musician-select">
							<span class="color-sample" style="background-color: var(--accent-color);"></span>
							Non-Musicians
						</label>
					</div>
					
					<div class="checkbox-item">
						<input 
							type="checkbox" 
							id="certainty-select" 
							bind:checked={showCertainty}
							on:change={filterMarkers}
						/>
						<label for="certainty-select">High Certainty Only</label>
					</div>
				</div>
				
				<!-- Institution Filter -->
				<div class="custom-dropdown">
					<button id="institution-button" class="with-arrow">
						View Institutions
					</button>
				</div>
			</div>
			
			<!-- Selected Names Bar -->
			{#if activeNames.length > 0}
			<div class="selected-names-bar">
				<div class="active-names">
					{#each activeNames as name}
					<div class="selected-person-item">
						<span class="remove-btn" on:click={() => removeName(name)}>&times;</span>
						{name}
					</div>
					{/each}
				</div>
			</div>
			{/if}
			
			<!-- Map -->
			<div id="map" bind:this={mapElement}></div>
			
			<!-- Search Count -->
			<div id="search-count">
				[{totalMarkers} {totalMarkers === 1 ? 'event' : 'events'}, of which {searchCount} are visible]
			</div>
		</div>
		
		<!-- Sidebar -->
		<div id="sidebar">
			<h3>Visible Events</h3>
			<table id="active-markers-table">
				<thead>
					<tr>
						<th>Event Details</th>
					</tr>
				</thead>
				<tbody>
					<!-- Events will be populated here -->
				</tbody>
			</table>
		</div>
	</div>
	
	<!-- Date Slider -->
	<div class="slider-container">
		<div class="slider-wrapper">
			<input 
				type="range" 
				id="date-slider-min" 
				min="1400" 
				max="1600" 
				bind:value={dateMin}
				on:input={handleDateSliderChange}
			/>
			<input 
				type="range" 
				id="date-slider-max" 
				min="1400" 
				max="1600" 
				bind:value={dateMax}
				on:input={handleDateSliderChange}
			/>
			<div class="slider-active-label-container">
				<span class="slider-active-label-start">{dateMin}</span>
				<span class="slider-active-label-end">{dateMax}</span>
			</div>
		</div>
	</div>
	
	<!-- Histogram -->
	<div class="histogram-container">
		<table class="histogram">
			<tr id="histogram-row">
				<!-- Histogram bars will be populated here -->
			</tr>
		</table>
	</div>
</div>

<!-- Autocomplete Results -->
{#if showAutocomplete}
<div class="autocomplete-results">
	{#each autocompleteResults as result}
	<div class="autocomplete-item" on:click={() => selectAutocomplete(result)}>
		{result.name}
	</div>
	{/each}
</div>
{/if}